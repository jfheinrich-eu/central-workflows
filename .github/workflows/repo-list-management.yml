name: Manage Repository List

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - list-enabled
          - list-all
          - validate-config
      repository_name:
        description: "Repository name to check (optional)"
        required: false
        type: string

permissions:
  contents: read

jobs:
  manage-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Perform requested action
        run: |
          case "${{ github.event.inputs.action }}" in
            "list-enabled")
              echo "## Enabled Repositories:" >> $GITHUB_STEP_SUMMARY
              jq -r '.repositories[] | select(.enabled == true) | "- " + .name' repos-config.json >> $GITHUB_STEP_SUMMARY
              ;;
            "list-all")
              echo "## All Repositories:" >> $GITHUB_STEP_SUMMARY
              echo "|Repository|Status|" >> $GITHUB_STEP_SUMMARY
              echo "|----------|------|" >> $GITHUB_STEP_SUMMARY
              jq -r '.repositories[] | "|" + .name + "|" + (if .enabled then "enabled" else "disabled" end) + "|"' repos-config.json >> $GITHUB_STEP_SUMMARY
              ;;
            "validate-config")
              if jq empty repos-config.json 2>/dev/null; then
                echo "## Validating configuration" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "✅ Configuration is valid JSON" >> $GITHUB_STEP_SUMMARY
                echo "Total repositories: $(jq '.repositories | length' repos-config.json)" >> $GITHUB_STEP_SUMMARY
                echo "Enabled repositories: $(jq '[.repositories[] | select(.enabled == true)] | length' repos-config.json)" >> $GITHUB_STEP_SUMMARY
              else
                echo "::error file=repos-config.json,title=Validate::❌ Configuration contains invalid JSON"
                exit 1
              fi
              ;;
          esac

          if [ -n "${{ github.event.inputs.repository_name }}" ]; then
            status=$(jq -r --arg repo "${{ github.event.inputs.repository_name }}" '.repositories[] | select(.name == $repo) | if .enabled then "enabled" else "disabled" end' repos-config.json)
            if [ "$status" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## Repository Status: ${{ github.event.inputs.repository_name }}" >> $GITHUB_STEP_SUMMARY
              echo "Status: $status" >> $GITHUB_STEP_SUMMARY
            else
              echo "::warning file=repos-config.json,title=${{ github.event.inputs.repository_name }}::Repository not found in configuration"
            fi
          fi
